#!/usr/bin/env ruby

require 'bundler/setup'
require 'crawling'
require 'moister'
require 'ostruct'

module Crawling::Command
  def self.nil_if_empty arr
    arr.empty? ? nil : arr
  end

  def self.run args
    config = nil
    command = nil
    positionals = nil

    Moister::SubcommandOptionParser.new do |op|
      op.banner = 'usage: crawling [global options] command [command options]'

      op.for_all do |op|
        op.on_tail '-h', '--help', 'show this help message' do
          puts op
          exit
        end
      end

      op.on '-c', '--config dir', 'path to configuration directory', 'config_dir'
      op.on '-H', '--home dir', 'path to home directory', 'home_dir'

      op.subcommand 'cd', 'run shell in store directory'
      op.subcommand 'add,a *paths', 'add paths to store directory'
      op.subcommand 'get,g *paths', 'get paths from store directory'
      op.subcommand 'diff,d [*paths]', 'show differences between store directory and filesystem'
      op.subcommand 'merge,m [*paths]', 'merge differences between store directory and filesystem' do |subop|
        subop.on '-m', '--merge-app app', 'command used to merge files', 'merge_app'
      end
      op.subcommand 'clone', 'clone or pull latest store using configured commands'

      parsed_cfg = op.parse(args)
      command = parsed_cfg.command
      config = OpenStruct.new parsed_cfg[:config]
    end

    unless command
      puts 'please supply a command, see --help'
      exit
    end

    command_cfg = OpenStruct.new config[command]
    config.delete_field command

    crawling = Crawling::Instance.new(**config.to_h)
    case command
    when 'cd'
      crawling.cd
    when 'add'
      crawling.add command_cfg.paths
    when 'get'
      crawling.get command_cfg.paths
    when 'diff'
      crawling.diff nil_if_empty(command_cfg.paths)
    when 'merge'
      crawling.merge nil_if_empty(command_cfg.paths)
    when 'clone'
      crawling.clone
    end
  rescue RuntimeError => e
    puts e.to_s
  rescue Interrupt => e
    exit 1
  end
end

Crawling::Command::run ARGV
